// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: model/todo.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoClient interface {
	CreateTodo(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*TodoItem, error)
	CreateTodos(ctx context.Context, opts ...grpc.CallOption) (Todo_CreateTodosClient, error)
	ReadTodos(ctx context.Context, in *Void, opts ...grpc.CallOption) (Todo_ReadTodosClient, error)
}

type todoClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoClient(cc grpc.ClientConnInterface) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) CreateTodo(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, "/todoPackage.Todo/createTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) CreateTodos(ctx context.Context, opts ...grpc.CallOption) (Todo_CreateTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &Todo_ServiceDesc.Streams[0], "/todoPackage.Todo/createTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoCreateTodosClient{stream}
	return x, nil
}

type Todo_CreateTodosClient interface {
	Send(*TodoItem) error
	CloseAndRecv() (*TodoItems, error)
	grpc.ClientStream
}

type todoCreateTodosClient struct {
	grpc.ClientStream
}

func (x *todoCreateTodosClient) Send(m *TodoItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoCreateTodosClient) CloseAndRecv() (*TodoItems, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TodoItems)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoClient) ReadTodos(ctx context.Context, in *Void, opts ...grpc.CallOption) (Todo_ReadTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &Todo_ServiceDesc.Streams[1], "/todoPackage.Todo/readTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoReadTodosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Todo_ReadTodosClient interface {
	Recv() (*TodoItem, error)
	grpc.ClientStream
}

type todoReadTodosClient struct {
	grpc.ClientStream
}

func (x *todoReadTodosClient) Recv() (*TodoItem, error) {
	m := new(TodoItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServer is the server API for Todo service.
// All implementations must embed UnimplementedTodoServer
// for forward compatibility
type TodoServer interface {
	CreateTodo(context.Context, *TodoItem) (*TodoItem, error)
	CreateTodos(Todo_CreateTodosServer) error
	ReadTodos(*Void, Todo_ReadTodosServer) error
	mustEmbedUnimplementedTodoServer()
}

// UnimplementedTodoServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (UnimplementedTodoServer) CreateTodo(context.Context, *TodoItem) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoServer) CreateTodos(Todo_CreateTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTodos not implemented")
}
func (UnimplementedTodoServer) ReadTodos(*Void, Todo_ReadTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTodos not implemented")
}
func (UnimplementedTodoServer) mustEmbedUnimplementedTodoServer() {}

// UnsafeTodoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServer will
// result in compilation errors.
type UnsafeTodoServer interface {
	mustEmbedUnimplementedTodoServer()
}

func RegisterTodoServer(s grpc.ServiceRegistrar, srv TodoServer) {
	s.RegisterService(&Todo_ServiceDesc, srv)
}

func _Todo_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoPackage.Todo/createTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).CreateTodo(ctx, req.(*TodoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_CreateTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServer).CreateTodos(&todoCreateTodosServer{stream})
}

type Todo_CreateTodosServer interface {
	SendAndClose(*TodoItems) error
	Recv() (*TodoItem, error)
	grpc.ServerStream
}

type todoCreateTodosServer struct {
	grpc.ServerStream
}

func (x *todoCreateTodosServer) SendAndClose(m *TodoItems) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoCreateTodosServer) Recv() (*TodoItem, error) {
	m := new(TodoItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Todo_ReadTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServer).ReadTodos(m, &todoReadTodosServer{stream})
}

type Todo_ReadTodosServer interface {
	Send(*TodoItem) error
	grpc.ServerStream
}

type todoReadTodosServer struct {
	grpc.ServerStream
}

func (x *todoReadTodosServer) Send(m *TodoItem) error {
	return x.ServerStream.SendMsg(m)
}

// Todo_ServiceDesc is the grpc.ServiceDesc for Todo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoPackage.Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTodo",
			Handler:    _Todo_CreateTodo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "createTodos",
			Handler:       _Todo_CreateTodos_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "readTodos",
			Handler:       _Todo_ReadTodos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model/todo.proto",
}
